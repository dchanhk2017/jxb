package net.opengis.fes._2;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;

@XmlRegistry
public class ObjectFactory {

    private final static QName _AbstractProjectionClause_QNAME = new QName("http://www.opengis.net/fes/2.0", "AbstractProjectionClause");
    private final static QName _PropertyIsGreaterThan_QNAME = new QName("http://www.opengis.net/fes/2.0", "PropertyIsGreaterThan");
    private final static QName _TContains_QNAME = new QName("http://www.opengis.net/fes/2.0", "TContains");
    private final static QName _Meets_QNAME = new QName("http://www.opengis.net/fes/2.0", "Meets");
    private final static QName _PropertyIsNotEqualTo_QNAME = new QName("http://www.opengis.net/fes/2.0", "PropertyIsNotEqualTo");
    private final static QName _SpatialOps_QNAME = new QName("http://www.opengis.net/fes/2.0", "spatialOps");
    private final static QName _PropertyIsLessThanOrEqualTo_QNAME = new QName("http://www.opengis.net/fes/2.0", "PropertyIsLessThanOrEqualTo");
    private final static QName _LogicOps_QNAME = new QName("http://www.opengis.net/fes/2.0", "logicOps");
    private final static QName _Id_QNAME = new QName("http://www.opengis.net/fes/2.0", "_Id");
    private final static QName _AbstractQueryExpression_QNAME = new QName("http://www.opengis.net/fes/2.0", "AbstractQueryExpression");
    private final static QName _Contains_QNAME = new QName("http://www.opengis.net/fes/2.0", "Contains");
    private final static QName _PropertyIsLike_QNAME = new QName("http://www.opengis.net/fes/2.0", "PropertyIsLike");
    private final static QName _PropertyIsEqualTo_QNAME = new QName("http://www.opengis.net/fes/2.0", "PropertyIsEqualTo");
    private final static QName _Begins_QNAME = new QName("http://www.opengis.net/fes/2.0", "Begins");
    private final static QName _During_QNAME = new QName("http://www.opengis.net/fes/2.0", "During");
    private final static QName _ValueReference_QNAME = new QName("http://www.opengis.net/fes/2.0", "ValueReference");
    private final static QName _BBOX_QNAME = new QName("http://www.opengis.net/fes/2.0", "BBOX");
    private final static QName _SortBy_QNAME = new QName("http://www.opengis.net/fes/2.0", "SortBy");
    private final static QName _Not_QNAME = new QName("http://www.opengis.net/fes/2.0", "Not");
    private final static QName _Beyond_QNAME = new QName("http://www.opengis.net/fes/2.0", "Beyond");
    private final static QName _DWithin_QNAME = new QName("http://www.opengis.net/fes/2.0", "DWithin");
    private final static QName _Expression_QNAME = new QName("http://www.opengis.net/fes/2.0", "expression");
    private final static QName _EndedBy_QNAME = new QName("http://www.opengis.net/fes/2.0", "EndedBy");
    private final static QName _Within_QNAME = new QName("http://www.opengis.net/fes/2.0", "Within");
    private final static QName _Or_QNAME = new QName("http://www.opengis.net/fes/2.0", "Or");
    private final static QName _PropertyIsBetween_QNAME = new QName("http://www.opengis.net/fes/2.0", "PropertyIsBetween");
    private final static QName _PropertyIsNull_QNAME = new QName("http://www.opengis.net/fes/2.0", "PropertyIsNull");
    private final static QName _And_QNAME = new QName("http://www.opengis.net/fes/2.0", "And");
    private final static QName _PropertyIsNil_QNAME = new QName("http://www.opengis.net/fes/2.0", "PropertyIsNil");
    private final static QName _Touches_QNAME = new QName("http://www.opengis.net/fes/2.0", "Touches");
    private final static QName _Literal_QNAME = new QName("http://www.opengis.net/fes/2.0", "Literal");
    private final static QName _Ends_QNAME = new QName("http://www.opengis.net/fes/2.0", "Ends");
    private final static QName _TOverlaps_QNAME = new QName("http://www.opengis.net/fes/2.0", "TOverlaps");
    private final static QName _ComparisonOps_QNAME = new QName("http://www.opengis.net/fes/2.0", "comparisonOps");
    private final static QName _ResourceId_QNAME = new QName("http://www.opengis.net/fes/2.0", "ResourceId");
    private final static QName _MetBy_QNAME = new QName("http://www.opengis.net/fes/2.0", "MetBy");
    private final static QName _Equals_QNAME = new QName("http://www.opengis.net/fes/2.0", "Equals");
    private final static QName _AbstractAdhocQueryExpression_QNAME = new QName("http://www.opengis.net/fes/2.0", "AbstractAdhocQueryExpression");
    private final static QName _Function_QNAME = new QName("http://www.opengis.net/fes/2.0", "Function");
    private final static QName _Disjoint_QNAME = new QName("http://www.opengis.net/fes/2.0", "Disjoint");
    private final static QName _TemporalOps_QNAME = new QName("http://www.opengis.net/fes/2.0", "temporalOps");
    private final static QName _Overlaps_QNAME = new QName("http://www.opengis.net/fes/2.0", "Overlaps");
    private final static QName _OverlappedBy_QNAME = new QName("http://www.opengis.net/fes/2.0", "OverlappedBy");
    private final static QName _BegunBy_QNAME = new QName("http://www.opengis.net/fes/2.0", "BegunBy");
    private final static QName _Crosses_QNAME = new QName("http://www.opengis.net/fes/2.0", "Crosses");
    private final static QName _PropertyIsLessThan_QNAME = new QName("http://www.opengis.net/fes/2.0", "PropertyIsLessThan");
    private final static QName _PropertyIsGreaterThanOrEqualTo_QNAME = new QName("http://www.opengis.net/fes/2.0", "PropertyIsGreaterThanOrEqualTo");
    private final static QName _Before_QNAME = new QName("http://www.opengis.net/fes/2.0", "Before");
    private final static QName _After_QNAME = new QName("http://www.opengis.net/fes/2.0", "After");
    private final static QName _Filter_QNAME = new QName("http://www.opengis.net/fes/2.0", "Filter");
    private final static QName _Intersects_QNAME = new QName("http://www.opengis.net/fes/2.0", "Intersects");
    private final static QName _ExtensionOps_QNAME = new QName("http://www.opengis.net/fes/2.0", "extensionOps");
    private final static QName _AnyInteracts_QNAME = new QName("http://www.opengis.net/fes/2.0", "AnyInteracts");
    private final static QName _AbstractSortingClause_QNAME = new QName("http://www.opengis.net/fes/2.0", "AbstractSortingClause");
    private final static QName _AbstractSelectionClause_QNAME = new QName("http://www.opengis.net/fes/2.0", "AbstractSelectionClause");
    private final static QName _TEquals_QNAME = new QName("http://www.opengis.net/fes/2.0", "TEquals");
    public ObjectFactory() {
    }

    public GeometryOperandsType createGeometryOperandsType() {
        return new GeometryOperandsType();
    }

    public TemporalOperandsType createTemporalOperandsType() {
        return new TemporalOperandsType();
    }

    public BinaryComparisonOpType createBinaryComparisonOpType() {
        return new BinaryComparisonOpType();
    }

    public BinarySpatialOpType createBinarySpatialOpType() {
        return new BinarySpatialOpType();
    }

    public BinaryTemporalOpType createBinaryTemporalOpType() {
        return new BinaryTemporalOpType();
    }

    public FilterCapabilities createFilterCapabilities() {
        return new FilterCapabilities();
    }

    public ConformanceType createConformanceType() {
        return new ConformanceType();
    }

    public IdCapabilitiesType createIdCapabilitiesType() {
        return new IdCapabilitiesType();
    }

    public ScalarCapabilitiesType createScalarCapabilitiesType() {
        return new ScalarCapabilitiesType();
    }

    public SpatialCapabilitiesType createSpatialCapabilitiesType() {
        return new SpatialCapabilitiesType();
    }

    public TemporalCapabilitiesType createTemporalCapabilitiesType() {
        return new TemporalCapabilitiesType();
    }

    public AvailableFunctionsType createAvailableFunctionsType() {
        return new AvailableFunctionsType();
    }

    public ExtendedCapabilitiesType createExtendedCapabilitiesType() {
        return new ExtendedCapabilitiesType();
    }

    public DistanceBufferType createDistanceBufferType() {
        return new DistanceBufferType();
    }

    public LogicalOperators createLogicalOperators() {
        return new LogicalOperators();
    }

    public LiteralType createLiteralType() {
        return new LiteralType();
    }

    public PropertyIsNilType createPropertyIsNilType() {
        return new PropertyIsNilType();
    }

    public FilterType createFilterType() {
        return new FilterType();
    }

    public BinaryLogicOpType createBinaryLogicOpType() {
        return new BinaryLogicOpType();
    }

    public PropertyIsBetweenType createPropertyIsBetweenType() {
        return new PropertyIsBetweenType();
    }

    public PropertyIsNullType createPropertyIsNullType() {
        return new PropertyIsNullType();
    }

    public ResourceIdType createResourceIdType() {
        return new ResourceIdType();
    }

    public PropertyIsLikeType createPropertyIsLikeType() {
        return new PropertyIsLikeType();
    }

    public BBOXType createBBOXType() {
        return new BBOXType();
    }

    public SortByType createSortByType() {
        return new SortByType();
    }

    public FunctionType createFunctionType() {
        return new FunctionType();
    }

    public UnaryLogicOpType createUnaryLogicOpType() {
        return new UnaryLogicOpType();
    }

    public ArgumentType createArgumentType() {
        return new ArgumentType();
    }

    public AdditionalOperatorsType createAdditionalOperatorsType() {
        return new AdditionalOperatorsType();
    }

    public SortPropertyType createSortPropertyType() {
        return new SortPropertyType();
    }

    public SpatialOperatorType createSpatialOperatorType() {
        return new SpatialOperatorType();
    }

    public AvailableFunctionType createAvailableFunctionType() {
        return new AvailableFunctionType();
    }

    public LowerBoundaryType createLowerBoundaryType() {
        return new LowerBoundaryType();
    }

    public ResourceIdentifierType createResourceIdentifierType() {
        return new ResourceIdentifierType();
    }

    public ComparisonOperatorType createComparisonOperatorType() {
        return new ComparisonOperatorType();
    }

    public MeasureType createMeasureType() {
        return new MeasureType();
    }

    public ExtensionOperatorType createExtensionOperatorType() {
        return new ExtensionOperatorType();
    }

    public ArgumentsType createArgumentsType() {
        return new ArgumentsType();
    }

    public ComparisonOperatorsType createComparisonOperatorsType() {
        return new ComparisonOperatorsType();
    }

    public UpperBoundaryType createUpperBoundaryType() {
        return new UpperBoundaryType();
    }

    public TemporalOperatorType createTemporalOperatorType() {
        return new TemporalOperatorType();
    }

    public TemporalOperatorsType createTemporalOperatorsType() {
        return new TemporalOperatorsType();
    }

    public SpatialOperatorsType createSpatialOperatorsType() {
        return new SpatialOperatorsType();
    }

    public GeometryOperandsType.GeometryOperand createGeometryOperandsTypeGeometryOperand() {
        return new GeometryOperandsType.GeometryOperand();
    }

    public TemporalOperandsType.TemporalOperand createTemporalOperandsTypeTemporalOperand() {
        return new TemporalOperandsType.TemporalOperand();
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "AbstractProjectionClause")
    public JAXBElement<Object> createAbstractProjectionClause(Object value) {
        return new JAXBElement<Object>(_AbstractProjectionClause_QNAME, Object.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "PropertyIsGreaterThan", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "comparisonOps")
    public JAXBElement<BinaryComparisonOpType> createPropertyIsGreaterThan(BinaryComparisonOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "PropertyIsGreaterThan"));
        return new JAXBElement<BinaryComparisonOpType>(_PropertyIsGreaterThan_QNAME, BinaryComparisonOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "TContains", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createTContains(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "TContains"));
        return new JAXBElement<BinaryTemporalOpType>(_TContains_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Meets", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createMeets(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Meets"));
        return new JAXBElement<BinaryTemporalOpType>(_Meets_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "PropertyIsNotEqualTo", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "comparisonOps")
    public JAXBElement<BinaryComparisonOpType> createPropertyIsNotEqualTo(BinaryComparisonOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "PropertyIsNotEqualTo"));
        return new JAXBElement<BinaryComparisonOpType>(_PropertyIsNotEqualTo_QNAME, BinaryComparisonOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "spatialOps")
    public JAXBElement<SpatialOpsType> createSpatialOps(SpatialOpsType value) {
        return new JAXBElement<SpatialOpsType>(_SpatialOps_QNAME, SpatialOpsType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "PropertyIsLessThanOrEqualTo", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "comparisonOps")
    public JAXBElement<BinaryComparisonOpType> createPropertyIsLessThanOrEqualTo(BinaryComparisonOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "PropertyIsLessThanOrEqualTo"));
        return new JAXBElement<BinaryComparisonOpType>(_PropertyIsLessThanOrEqualTo_QNAME, BinaryComparisonOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "logicOps")
    public JAXBElement<LogicOpsType> createLogicOps(LogicOpsType value) {
        return new JAXBElement<LogicOpsType>(_LogicOps_QNAME, LogicOpsType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "_Id")
    public JAXBElement<AbstractIdType> createId(AbstractIdType value) {
        return new JAXBElement<AbstractIdType>(_Id_QNAME, AbstractIdType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "AbstractQueryExpression")
    public JAXBElement<AbstractQueryExpressionType> createAbstractQueryExpression(AbstractQueryExpressionType value) {
        return new JAXBElement<AbstractQueryExpressionType>(_AbstractQueryExpression_QNAME, AbstractQueryExpressionType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Contains", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "spatialOps")
    public JAXBElement<BinarySpatialOpType> createContains(BinarySpatialOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Contains"));
        return new JAXBElement<BinarySpatialOpType>(_Contains_QNAME, BinarySpatialOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "PropertyIsLike", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "comparisonOps")
    public JAXBElement<PropertyIsLikeType> createPropertyIsLike(PropertyIsLikeType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "PropertyIsLike"));
        return new JAXBElement<PropertyIsLikeType>(_PropertyIsLike_QNAME, PropertyIsLikeType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "PropertyIsEqualTo", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "comparisonOps")
    public JAXBElement<BinaryComparisonOpType> createPropertyIsEqualTo(BinaryComparisonOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "PropertyIsEqualTo"));
        return new JAXBElement<BinaryComparisonOpType>(_PropertyIsEqualTo_QNAME, BinaryComparisonOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Begins", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createBegins(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Begins"));
        return new JAXBElement<BinaryTemporalOpType>(_Begins_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "During", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createDuring(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "During"));
        return new JAXBElement<BinaryTemporalOpType>(_During_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "ValueReference", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "expression")
    public JAXBElement<String> createValueReference(String value) {
        return new JAXBElement<String>(_ValueReference_QNAME, String.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "BBOX", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "spatialOps")
    public JAXBElement<BBOXType> createBBOX(BBOXType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "BBOX"));
        return new JAXBElement<BBOXType>(_BBOX_QNAME, BBOXType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "SortBy", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "AbstractSortingClause")
    public JAXBElement<SortByType> createSortBy(SortByType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "SortBy"));
        return new JAXBElement<SortByType>(_SortBy_QNAME, SortByType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Not", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "logicOps")
    public JAXBElement<UnaryLogicOpType> createNot(UnaryLogicOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Not"));
        return new JAXBElement<UnaryLogicOpType>(_Not_QNAME, UnaryLogicOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Beyond", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "spatialOps")
    public JAXBElement<DistanceBufferType> createBeyond(DistanceBufferType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Beyond"));
        return new JAXBElement<DistanceBufferType>(_Beyond_QNAME, DistanceBufferType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "DWithin", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "spatialOps")
    public JAXBElement<DistanceBufferType> createDWithin(DistanceBufferType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "DWithin"));
        return new JAXBElement<DistanceBufferType>(_DWithin_QNAME, DistanceBufferType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "expression")
    public JAXBElement<Object> createExpression(Object value) {
        return new JAXBElement<Object>(_Expression_QNAME, Object.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "EndedBy", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createEndedBy(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "EndedBy"));
        return new JAXBElement<BinaryTemporalOpType>(_EndedBy_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Within", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "spatialOps")
    public JAXBElement<BinarySpatialOpType> createWithin(BinarySpatialOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Within"));
        return new JAXBElement<BinarySpatialOpType>(_Within_QNAME, BinarySpatialOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Or", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "logicOps")
    public JAXBElement<BinaryLogicOpType> createOr(BinaryLogicOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Or"));
        return new JAXBElement<BinaryLogicOpType>(_Or_QNAME, BinaryLogicOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "PropertyIsBetween", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "comparisonOps")
    public JAXBElement<PropertyIsBetweenType> createPropertyIsBetween(PropertyIsBetweenType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "PropertyIsBetween"));
        return new JAXBElement<PropertyIsBetweenType>(_PropertyIsBetween_QNAME, PropertyIsBetweenType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "PropertyIsNull", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "comparisonOps")
    public JAXBElement<PropertyIsNullType> createPropertyIsNull(PropertyIsNullType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "PropertyIsNull"));
        return new JAXBElement<PropertyIsNullType>(_PropertyIsNull_QNAME, PropertyIsNullType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "And", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "logicOps")
    public JAXBElement<BinaryLogicOpType> createAnd(BinaryLogicOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "And"));
        return new JAXBElement<BinaryLogicOpType>(_And_QNAME, BinaryLogicOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "PropertyIsNil", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "comparisonOps")
    public JAXBElement<PropertyIsNilType> createPropertyIsNil(PropertyIsNilType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "PropertyIsNil"));
        return new JAXBElement<PropertyIsNilType>(_PropertyIsNil_QNAME, PropertyIsNilType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Touches", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "spatialOps")
    public JAXBElement<BinarySpatialOpType> createTouches(BinarySpatialOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Touches"));
        return new JAXBElement<BinarySpatialOpType>(_Touches_QNAME, BinarySpatialOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Literal", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "expression")
    public JAXBElement<LiteralType> createLiteral(LiteralType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Literal"));
        return new JAXBElement<LiteralType>(_Literal_QNAME, LiteralType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Ends", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createEnds(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Ends"));
        return new JAXBElement<BinaryTemporalOpType>(_Ends_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "TOverlaps", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createTOverlaps(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "TOverlaps"));
        return new JAXBElement<BinaryTemporalOpType>(_TOverlaps_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "comparisonOps")
    public JAXBElement<ComparisonOpsType> createComparisonOps(ComparisonOpsType value) {
        return new JAXBElement<ComparisonOpsType>(_ComparisonOps_QNAME, ComparisonOpsType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "ResourceId", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "_Id")
    public JAXBElement<ResourceIdType> createResourceId(ResourceIdType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "ResourceId"));
        return new JAXBElement<ResourceIdType>(_ResourceId_QNAME, ResourceIdType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "MetBy", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createMetBy(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "MetBy"));
        return new JAXBElement<BinaryTemporalOpType>(_MetBy_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Equals", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "spatialOps")
    public JAXBElement<BinarySpatialOpType> createEquals(BinarySpatialOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Equals"));
        return new JAXBElement<BinarySpatialOpType>(_Equals_QNAME, BinarySpatialOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "AbstractAdhocQueryExpression", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "AbstractQueryExpression")
    public JAXBElement<AbstractAdhocQueryExpressionType> createAbstractAdhocQueryExpression(AbstractAdhocQueryExpressionType value) {
        return new JAXBElement<AbstractAdhocQueryExpressionType>(_AbstractAdhocQueryExpression_QNAME, AbstractAdhocQueryExpressionType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Function", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "expression")
    public JAXBElement<FunctionType> createFunction(FunctionType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Function"));
        return new JAXBElement<FunctionType>(_Function_QNAME, FunctionType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Disjoint", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "spatialOps")
    public JAXBElement<BinarySpatialOpType> createDisjoint(BinarySpatialOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Disjoint"));
        return new JAXBElement<BinarySpatialOpType>(_Disjoint_QNAME, BinarySpatialOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "temporalOps")
    public JAXBElement<TemporalOpsType> createTemporalOps(TemporalOpsType value) {
        return new JAXBElement<TemporalOpsType>(_TemporalOps_QNAME, TemporalOpsType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Overlaps", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "spatialOps")
    public JAXBElement<BinarySpatialOpType> createOverlaps(BinarySpatialOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Overlaps"));
        return new JAXBElement<BinarySpatialOpType>(_Overlaps_QNAME, BinarySpatialOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "OverlappedBy", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createOverlappedBy(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "OverlappedBy"));
        return new JAXBElement<BinaryTemporalOpType>(_OverlappedBy_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "BegunBy", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createBegunBy(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "BegunBy"));
        return new JAXBElement<BinaryTemporalOpType>(_BegunBy_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Crosses", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "spatialOps")
    public JAXBElement<BinarySpatialOpType> createCrosses(BinarySpatialOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Crosses"));
        return new JAXBElement<BinarySpatialOpType>(_Crosses_QNAME, BinarySpatialOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "PropertyIsLessThan", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "comparisonOps")
    public JAXBElement<BinaryComparisonOpType> createPropertyIsLessThan(BinaryComparisonOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "PropertyIsLessThan"));
        return new JAXBElement<BinaryComparisonOpType>(_PropertyIsLessThan_QNAME, BinaryComparisonOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "PropertyIsGreaterThanOrEqualTo", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "comparisonOps")
    public JAXBElement<BinaryComparisonOpType> createPropertyIsGreaterThanOrEqualTo(BinaryComparisonOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "PropertyIsGreaterThanOrEqualTo"));
        return new JAXBElement<BinaryComparisonOpType>(_PropertyIsGreaterThanOrEqualTo_QNAME, BinaryComparisonOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Before", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createBefore(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Before"));
        return new JAXBElement<BinaryTemporalOpType>(_Before_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "After", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createAfter(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "After"));
        return new JAXBElement<BinaryTemporalOpType>(_After_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Filter", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "AbstractSelectionClause")
    public JAXBElement<FilterType> createFilter(FilterType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Filter"));
        return new JAXBElement<FilterType>(_Filter_QNAME, FilterType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "Intersects", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "spatialOps")
    public JAXBElement<BinarySpatialOpType> createIntersects(BinarySpatialOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "Intersects"));
        return new JAXBElement<BinarySpatialOpType>(_Intersects_QNAME, BinarySpatialOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "extensionOps")
    public JAXBElement<ExtensionOpsType> createExtensionOps(ExtensionOpsType value) {
        return new JAXBElement<ExtensionOpsType>(_ExtensionOps_QNAME, ExtensionOpsType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "AnyInteracts", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createAnyInteracts(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "AnyInteracts"));
        return new JAXBElement<BinaryTemporalOpType>(_AnyInteracts_QNAME, BinaryTemporalOpType.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "AbstractSortingClause")
    public JAXBElement<Object> createAbstractSortingClause(Object value) {
        return new JAXBElement<Object>(_AbstractSortingClause_QNAME, Object.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "AbstractSelectionClause")
    public JAXBElement<Object> createAbstractSelectionClause(Object value) {
        return new JAXBElement<Object>(_AbstractSelectionClause_QNAME, Object.class, null, value);
    }

    @XmlElementDecl(namespace = "http://www.opengis.net/fes/2.0", name = "TEquals", substitutionHeadNamespace = "http://www.opengis.net/fes/2.0", substitutionHeadName = "temporalOps")
    public JAXBElement<BinaryTemporalOpType> createTEquals(BinaryTemporalOpType value) {
        value.setJAXBElementName(new QName("http://www.opengis.net/fes/2.0", "TEquals"));
        return new JAXBElement<BinaryTemporalOpType>(_TEquals_QNAME, BinaryTemporalOpType.class, null, value);
    }

}
